import { RequestResult, Transaction } from '../../../types/api';
import { API_URL } from '../../../utils/constants';
import { fetchTS } from '../../../utils/fetchTS';

export interface TransactionData {
  amount: string;
  account: string;
  address: string;
  beneficiary: string;
  description: string;
}

export interface TransactionDataValidationError {
  amount?: string;
  account?: string;
}

export async function submitForm(formData: TransactionData): Promise<RequestResult<Transaction>> {
  try {
    const resp = await fetchTS<Transaction>(`${API_URL}/transactions`, {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ...formData,
        // id is auto generated by server-json
        // imitate creating date on backend site
        date: new Date(),
      }),
    });
    return { status: 'loaded', payload: resp };
  } catch (error) {
    if (error instanceof Response) {
      const err = new Error(`transaction could not be created: ${error.statusText}`);
      return { status: 'error', error: err };
    } else {
      const err = new Error('something went wrong');
      return { status: 'error', error: err };
    }
  }
}

export function validateTransactionData(formData: TransactionData) {
  const errors: TransactionDataValidationError = {};
  const amount = parseFloat(formData.amount);
  if (isNaN(amount) || amount <= 0) {
    errors.amount = '[amount] must be a positive number';
  }
  if (!/\d{2,}/.test(formData.account)) {
    errors.account = '[account number] must contain numbers';
  }

  return errors;
}
